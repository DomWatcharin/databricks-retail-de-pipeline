# 21_silver_products_scd2
from pyspark.sql import functions as F
from delta.tables import DeltaTable

spark.sql("USE CATALOG retail")
spark.sql("USE core")

# Prepare bronze
bronze = (spark.table("bronze_products")
          .select("product_id","sku","name","category","price")
          .withColumn("price", F.col("price").cast("decimal(10,2)")))

# Create target table if not exists
spark.sql("""
CREATE TABLE IF NOT EXISTS dim_product (
  product_id INT,
  sku STRING,
  name STRING,
  category STRING,
  price DECIMAL(10,2),
  valid_from TIMESTAMP,
  valid_to   TIMESTAMP,
  is_current BOOLEAN
) USING DELTA
""")

# 1) Close current rows where price changed
spark.sql("""
MERGE INTO dim_product AS tgt
USING (
  SELECT product_id, CAST(price AS DECIMAL(10,2)) AS price
  FROM bronze_products
) AS src
ON  tgt.product_id = src.product_id
AND tgt.is_current = TRUE
AND tgt.price <> src.price
WHEN MATCHED THEN
  UPDATE SET
    tgt.valid_to   = current_timestamp(),
    tgt.is_current = FALSE
""")

# 2) Insert new current rows (new products or changed price)
#    Provide all required columns explicitly
spark.sql("""
MERGE INTO dim_product AS tgt
USING (
  SELECT
    product_id,
    sku,
    name,
    category,
    CAST(price AS DECIMAL(10,2)) AS price,
    current_timestamp()           AS valid_from,
    CAST(NULL AS TIMESTAMP)       AS valid_to,
    TRUE                          AS is_current
  FROM bronze_products
) AS src
ON  tgt.product_id = src.product_id
AND tgt.is_current = TRUE
AND tgt.price = src.price
WHEN NOT MATCHED THEN INSERT (
    product_id, sku, name, category, price, valid_from, valid_to, is_current
) VALUES (
    src.product_id, src.sku, src.name, src.category, src.price, src.valid_from, src.valid_to, src.is_current
)
""")

display(spark.table("dim_product").orderBy("product_id","valid_from").limit(20))
